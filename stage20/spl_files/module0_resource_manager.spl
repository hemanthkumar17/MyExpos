breakpoint;
alias functionNum R1;
alias currentPID R2;

//Acquire Terminal
if( functionNum == ACQUIRE_TERMINAL ) then
    while( [TERMINAL_STATUS_TABLE] == 1 ) do
        [PROCESS_TABLE + ((16 * currentPID)) + 4] = WAIT_TERMINAL;
        multipush(R1, R2);
        
        call SCHEDULER;

        multipop(R1, R2);

    endwhile ;
    [TERMINAL_STATUS_TABLE] = 1;
    [TERMINAL_STATUS_TABLE + 1] = currentPID;
    return;
endif ;

//Release Terminal
if( functionNum == RELEASE_TERMINAL ) then
    
    if( currentPID != [TERMINAL_STATUS_TABLE + 1] ) then
        R0 = -1;
        return;
    endif;
    
    [TERMINAL_STATUS_TABLE] = 0;

    alias PID R11;
    PID = 0;

    while( PID < MAX_PROC_NUM ) do
        if( [PROCESS_TABLE + (16 * PID) + 4] == WAIT_TERMINAL ) then
            [PROCESS_TABLE + (16 * PID) + 4] = READY;
        endif ;
        PID = PID + 1;
    endwhile ;

    R0 = 0;

    return;
endif ;


if( functionNum == ACQUIRE_DISK ) then
    
    while( [DISK_STATUS_TABLE] ==  1) do
        [PROCESS_TABLE + (16 * currentPID) + 4] = WAIT_DISK;
        multipush(R1, R2);

        call SCHEDULER;
        
        multipop(R1, R2);
    endwhile ;
    
    [DISK_STATUS_TABLE] = 1; //Set status as busy
    [DISK_STATUS_TABLE + 4] = currentPID;   //currentPID
    return;
endif ;

return;