breakpoint;
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP; //Set User stack pointer in process table

//16-19 for kernel use, dont use 0-15 till 'backup' is called
//Set SP to Kernel Stack
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;

//Save user context (Base pointer , user registers, kernel registers)
backup;

//Write timer interrupt code here
alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE + 1];

//Save the page table entries
alias PROCESS_TABLE_ENTRY R1;
PROCESS_TABLE_ENTRY = PROCESS_TABLE + currentPID * 16;

[PROCESS_TABLE_ENTRY + 12] = SP % 512;
[PROCESS_TABLE_ENTRY + 14] = PTBR;
[PROCESS_TABLE_ENTRY + 15] = PTLR;

[PROCESS_TABLE_ENTRY + 4] = READY;

alias newPID  R2;
if( currentPID == 0 ) then
    newPID = 1;
else
    newPID = 0;
endif ;

alias NEW_PROCESS_TABLE R3;
NEW_PROCESS_TABLE = PROCESS_TABLE + newPID * 16;

//Set back Kernel SP, PTBR , PTLR
SP =  [NEW_PROCESS_TABLE + 11] * 512 + [NEW_PROCESS_TABLE + 12] ;
PTBR = [NEW_PROCESS_TABLE + 14];
PTLR = [NEW_PROCESS_TABLE + 15];

//Set the new PID in SYSTEM_STATUS_TABLE
[SYSTEM_STATUS_TABLE + 1] = newPID;

//Set the init process as running
breakpoint;
if([NEW_PROCESS_TABLE + 4] == CREATED) then
	[NEW_PROCESS_TABLE + 4] = RUNNING;
	SP = [NEW_PROCESS_TABLE + 13];
    breakpoint;
    ireturn;
endif;
[NEW_PROCESS_TABLE + 4] = RUNNING;

restore;

//Restore SP to user stack
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];
breakpoint;
ireturn;
