breakpoint;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 7; //Set mode to syscall for console in
alias userSP R0;
userSP = SP; //Store User Stack pointer for ease of use

//Backup SP and switch to kernel stack
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;

//Following code to apply address translation to find argument 1 - file Descriptor
alias physicalPageNum R1;
alias offset R2;
alias fileDescPhysicalAddr R3;
physicalPageNum = [PTBR + 2 * ((userSP - 4) / 512)];
offset = (userSP - 4) % 512;
fileDescPhysicalAddr = (physicalPageNum * 512) + offset;
alias fileDescriptor R4;
fileDescriptor = [fileDescPhysicalAddr];
//To confirm if we have obtained the file descriptor for console(-2)

if (fileDescriptor != -1)
then
	//extract return address and set the return value as -1 -> failure
	alias physicalAddrRetVal R5;
	physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512); //Base+offset
	[physicalAddrRetVal] = -1;
else
	//print argument 2
	alias word R5;
	word = [[PTBR + 2 * ((userSP - 3) / 512)] * 512 + ((userSP - 3) % 512)];
	
	//Backup registers
	multipush(R0, R1, R2, R3, R4, R5);

	R1 = TERMINAL_READ;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R3 = word;

	call DEVICE_MANAGER;

	//Restore registers
	multipop(R0, R1, R2, R3, R4, R5);

	//extract return address and set the return value as 0 -> success
	alias physicalAddrRetVal R6;
	physicalAddrRetVal = ([PTBR + 2 * (userSP - 1)/ 512] * 512) + ((userSP - 1) % 512);
	[physicalAddrRetVal - 1] = 0;
endif;

SP = userSP; // reset the stack which may have been used by print statement
//Reset mode to user mode and return the control
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
ireturn;
