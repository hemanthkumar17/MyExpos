//load exception handler routine
loadi(2, 15);
loadi(3, 16);

//load timer
loadi(4, 17);
loadi(5, 18);

//load console interrupt handler
loadi(8, 21);
loadi(9, 22);

//load int6 - console in
loadi(14, 27);
loadi(15, 28);

//load int7 - console out
loadi(16, 29);
loadi(17, 30);

//load int9 - exec
loadi(20, 33);
loadi(21, 34);

//load int10 - exit
loadi(22, 35);
loadi(23, 36);

//load module0_resource_manager
loadi(40, 53);
loadi(41, 54);

//load module1_process_manager
loadi(42, 55);
loadi(43, 56);

//load module2_memory_manager
loadi(44, 57);
loadi(45, 58);

//load module4_device_manager
loadi(48, 61);
loadi(49, 62);

//load module5_scheduler
loadi(50, 63);
loadi(51, 64);

//load inode table(with user table)
loadi(59, 3);
loadi(60, 4);

//load library code
loadi(63, 13);
loadi(64, 14);

//load shell
loadi(65, 7);
loadi(66, 8);


//INIT
PTBR = PAGE_TABLE_BASE + 20;
//LIBRARY
[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";
//
//HEAP
[PTBR + 4] = 76;
[PTBR + 5] = "0110";
[PTBR + 6] = 77;
[PTBR + 7] = "0110";
//CODE
[PTBR + 8] = 65;
[PTBR + 9] = "0100";
[PTBR + 10] = 66;
[PTBR + 11] = "0100";
[PTBR + 12] = -1;
[PTBR + 13] = "0000";
[PTBR + 14] = -1;
[PTBR + 15] = "0000";
//STACK
[PTBR + 16] = 78;
[PTBR + 17] = "0110";
[PTBR + 18] = 79;
[PTBR + 19] = "0110";

//INIT PROCESS_TABLE
alias PID R0;
alias POS R1;
PID = 1;
POS = 16*PID;
[PROCESS_TABLE + POS + 1] = 1; //Pid of init process
[PROCESS_TABLE + POS + 4] = CREATED;//State of init process
[PROCESS_TABLE + POS + 11] = 80; //User page area
[PROCESS_TABLE + POS + 12] = 0; //Kernel stack pointer
[PROCESS_TABLE + POS + 13] = 8*512; //User stack pointer
[PROCESS_TABLE + POS + 14] = PAGE_TABLE_BASE + 20;
[PROCESS_TABLE + POS + 15] = 10;
[78 * 512] = [65 * 512 + 1]; //INIT Entry point

PID = 2;
while( PID < MAX_PROC_NUM ) do
    POS = 16*PID;
    [PROCESS_TABLE + POS + 4] = TERMINATED;
    PID = PID + 1;
endwhile ;

alias counter R2;
counter = 0;
while(counter <= 82) do //0-82 used
    [MEMORY_FREE_LIST + counter] = 1;
    counter = counter + 1;
endwhile;


while(counter <= 127) do //83-127 unused
    [MEMORY_FREE_LIST + counter] = 0;
    counter = counter + 1;
endwhile;
[SYSTEM_STATUS_TABLE + 2] = 128 - 83;
[SYSTEM_STATUS_TABLE + 3] = 0;

[TERMINAL_STATUS_TABLE] = 0; //Terminal is available
return;