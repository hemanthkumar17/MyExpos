breakpoint;

alias functionNum R1;
alias page R2;

alias counter R0;
if( functionNum == GET_FREE_PAGE ) then
    //increment no of process waiting for a memory
    [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] + 1;

    //while no of available memory pages is zero, change its state to wait_mem and 
    //call scheduler so other processes can run
    while( [SYSTEM_STATUS_TABLE + 2] == 0 ) do
        [ PROCESS_TABLE + 16 * SYSTEM_STATUS_TABLE + 4 ] = WAIT_MEM;
        backup;
        call SCHEDULER;
        restore;
    endwhile ;
    //get the available mem page, decrement wait_mem and mem_free
    [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] - 1;
    [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;

    counter = 0;
    //find the first available page and store it in counter
    while(counter < MAX_MEM_PAGE) do
        if( [MEMORY_FREE_LIST + counter] == 0) then
            [MEMORY_FREE_LIST + counter] = 1;
            break; 
        endif;
        counter = counter + 1;
    endwhile;

    //if no page is found, return -1 indicating failure
    if( counter == MAX_MEM_PAGE ) then 
        counter = -1;
    endif;
endif ;


if( functionNum == RELEASE_PAGE ) then
    //update mem free list
    [MEMORY_FREE_LIST + page] = [MEMORY_FREE_LIST + page] - 1;
    //if the page is free, increment mem free
    if( [MEMORY_FREE_LIST + page] == 0 ) then
        [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] + 1;
    endif;

    //as we have a new page now, change every waiting mem process to ready state
    while( counter < MAX_PROC_NUM) do
        if ( [PROCESS_TABLE + 16 * counter + 4] == WAIT_MEM) then
            [PROCESS_TABLE + 16 * counter + 4] = READY;
        endif ;
        counter = counter + 1;
    endwhile;
endif ;
breakpoint;
return;
